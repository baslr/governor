// Generated by CoffeeScript 1.6.3
(function() {
  var fs, gets, hostNameUpdateFnc, http, ioServer, nodeStatic, server, staticS, url;

  fs = require('fs');

  url = require('url');

  http = require('http');

  nodeStatic = require('node-static');

  staticS = new nodeStatic.Server("./public");

  hostNameUpdateFnc = function() {};

  gets = {};

  module.exports.get = function(key) {
    if (gets['key'] == null) {
      gets['key'] = this.load("" + key + ".json");
      return gets['key'];
    }
    return gets['key'];
  };

  module.exports.load = function(fileName) {
    return JSON.parse(fs.readFileSync(fileName));
  };

  module.exports.save = function(fileName, json) {
    return fs.writeFileSync(fileName, JSON.stringify(json));
  };

  server = http.createServer();

  server.listen(12101, '0.0.0.0');

  ioServer = require('socket.io').listen(server);

  ioServer.set('log level', 1);

  server.on('error', function(e) {
    console.error("http:server:e");
    return console.dir(e);
  });

  server.on('request', function(req, res) {
    var json, newHostName, urlObj;
    if (-1 === req.url.search('/socket.io/1')) {
      staticS.serve(req, res);
      urlObj = url.parse(req.url);
      if (urlObj.query != null) {
        newHostName = urlObj.query.split('=')[1];
        json = exports.get('hostnames');
        if (-1 === json.indexOf(newHostName)) {
          hostNameUpdateFnc(newHostName);
          json.push(newHostName);
          return exports.save('hostnames.json', json);
        }
      }
    }
  });

  ioServer.sockets.on('connection', function(socket) {
    return socket.emit('guten Tag :D');
  });

  module.exports.toAll = function(msg, data) {
    return ioServer.sockets.emit(msg, data);
  };

  module.exports.setHostnameUpdateFnc = function(fnc) {
    return hostNameUpdateFnc = fnc;
  };

}).call(this);
