// Generated by CoffeeScript 1.6.3
(function() {
  var dir, e, fs, i, lfCache, n, _i, _len, _ref;

  fs = require('fs');

  lfCache = {};

  _ref = fs.readdirSync('lfCache');
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    dir = _ref[_i];
    if (fs.statSync("lfCache/" + dir).isDirectory()) {
      try {
        lfCache[dir] = JSON.parse(fs.readFileSync("lfCache/" + dir + "/cached.json"));
      } catch (_error) {
        e = _error;
        console.log("fs:readFileSync");
        console.dir(e);
      }
    }
  }

  for (i in lfCache) {
    n = lfCache[i];
    console.log(i);
  }

  module.exports.isCached = function(path) {
    var info, _ref1, _ref2;
    info = this.fragmentInfo(path);
    if (((_ref1 = lfCache["" + info.contentid + "-" + info.language + "-" + info.quality]) != null ? (_ref2 = _ref1[info.type]) != null ? _ref2[info.fragment] : void 0 : void 0) != null) {
      console.log("isCached=true " + (this.fragmentInfo(path, false)));
      return true;
    }
    return false;
    return fs.existsSync("lfCache/" + info.contentid + "-" + info.language + "-" + info.quality + "/" + (this.fragmentInfo(path, false)));
  };

  module.exports.getCachedData = function(path) {
    var file, info;
    info = this.fragmentInfo(path);
    file = lfCache["" + info.contentid + "-" + info.language + "-" + info.quality][info.type][info.fragment].file;
    return fs.readFileSync("lfCache/" + info.contentid + "-" + info.language + "-" + info.quality + "/" + file);
  };

  module.exports.cacheData = function(path, data) {
    var info;
    info = this.fragmentInfo(path);
    if (!fs.existsSync("lfCache/" + info.contentid + "-" + info.language + "-" + info.quality)) {
      fs.mkdirSync("lfCache/" + info.contentid + "-" + info.language + "-" + info.quality);
    }
    return fs.writeFileSync("lfCache/" + info.contentid + "-" + info.language + "-" + info.quality + "/" + (this.fragmentInfo(path, false)), data);
  };

  module.exports.pathInfo = function(path, container) {
    var info;
    info = this.fragmentInfo(path);
    container.qL = info.qL;
    container.type = info.type;
    container.fragment = info.fragment;
    container.quality = info.quality;
    container.contentid = info.contentid;
    return container.language = info.language;
  };

  module.exports.fragmentInfo = function(path, obj) {
    var info, nxt;
    if (obj == null) {
      obj = true;
    }
    info = {};
    info.qL = path.split('QualityLevels(')[1].split(')')[0];
    nxt = path.split('/Fragments(')[1].split(')')[0].split('=');
    if (nxt[0] === 'video') {
      info.type = 'video';
    } else {
      info.type = 'audio';
    }
    info.typeTag = nxt[0];
    info.fragment = nxt[1];
    if (-1 < path.search('/PRSDe/')) {
      info.quality = 'SD';
    } else {
      info.quality = 'HD';
    }
    info.contentid = path.split(/_PR(SD|HD).ism/)[0].split('_').pop();
    info.language = path.split("_" + info.contentid)[1].split('/').pop();
    if (obj) {
      return info;
    } else {
      return "" + info.contentid + "-" + info.language + "-" + info.quality + "-" + info.fragment + "-" + info.type + "-" + info.qL;
    }
  };

  module.exports.fragmentPathFromObj = function(obj) {
    return "/lf/encrypted/PRSDe/" + obj.language + "/" + obj.language + "_" + obj.contentid + "_PRSDe/" + obj.language + "_" + obj.contentid + "_PR" + obj.quality + ".ism/QualityLevels(" + obj.qL + ")/Fragments(" + obj.typeTag + "=" + obj.fragment + ")";
  };

}).call(this);
