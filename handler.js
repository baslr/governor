// Generated by CoffeeScript 1.6.3
(function() {
  var cache, check, config, extensions, http, i, id, ipAddresses, j, lf, m, n, os, url, _i, _len, _ref;

  id = Math.floor(new Date().getTime() / 1000);

  ipAddresses = [];

  extensions = require('./extensions.json');

  os = require('os');

  url = require('url');

  http = require('http');

  check = require('./check');

  cache = require('./cache');

  config = require('./config');

  lf = require('./lovefilm');

  _ref = os.networkInterfaces();
  for (i in _ref) {
    n = _ref[i];
    for (j = _i = 0, _len = n.length; _i < _len; j = ++_i) {
      m = n[j];
      if (m.family === 'IPv4' && m.internal === false && m.address !== '127.0.0.1') {
        ipAddresses.push(m.address);
      }
    }
  }

  console.log(ipAddresses);

  module.exports = function(req, res) {
    var container, urlObj;
    container = {
      id: id++,
      time: Math.floor(new Date().getTime() / 1000)
    };
    delete req.headers['cookie'];
    delete req.headers['proxy-connection'];
    req.on('error', function(e) {
      console.error('http:server:request:req:e');
      return console.dir(e);
    });
    res.on('error', function(e) {
      console.error('http:server:request:res:e');
      return console.dir(e);
    });
    req.on('readable', function() {
      return this.read();
    });
    urlObj = url.parse(req.url);
    container.method = req.method;
    container.hostname = urlObj.hostname;
    container.path = urlObj.path;
    container.contentid = 0;
    container.qL = 0;
    container.type = 0;
    container.fragment = 0;
    container.quality = 0;
    container.language = 0;
    container.cached = '0';
    if ('post' === req.method.toLowerCase()) {
      config.toAll('add-container', container);
      res.end();
      return;
    }
    if (check.isBad(urlObj)) {
      config.toAll('add-container', container);
      res.statusCode = 500;
      res.end('');
      return;
    }
    if (-1 < urlObj.path.search('/lf/encrypted/')) {
      lf.pathInfo(urlObj.path, container);
    }
    return req.on('end', function() {
      var data, reqReq;
      if (-1 < urlObj.path.search('/lf/encrypted/')) {
        if (lf.isCached(urlObj.path)) {
          res.end(lf.getCachedData(urlObj.path));
          container.cached = '1';
          config.toAll('add-container', container);
          return;
        }
      }
      if (-1 < urlObj.path.search("\\.(" + (extensions.join('|')) + ")$")) {
        if (cache.isCache(urlObj.href)) {
          data = cache.getCache(urlObj.href);
          if (-1 < urlObj.path.search('\\.png')) {
            res.setHeader('content-type', 'image/png');
          }
          res.setHeader('content-encoding', 'gzip');
          res.setHeader('content-length', data.length);
          res.end(data);
          console.log("from cache: " + urlObj.href);
          return;
        }
      }
      reqReq = http.request({
        localAddress: ipAddresses[0],
        hostname: urlObj.hostname,
        path: urlObj.path,
        headers: req.headers
      }, function(reqRes) {
        var _ref1;
        res.statusCode = reqRes.statusCode;
        _ref1 = reqRes.headers;
        for (i in _ref1) {
          n = _ref1[i];
          res.setHeader(i, n);
        }
        if (urlObj.hostname === 'mobil.zeit.de' && (reqRes.headers['content-encoding'] != null) && reqRes.headers['content-encoding'] === 'gzip') {
          data = new Buffer(0);
          reqRes.on('readable', function() {
            return data = Buffer.concat([data, this.read()]);
          });
        } else if (-1 < urlObj.path.search('^/lf/encrypted/')) {
          data = new Buffer(0);
          reqRes.on('readable', function() {
            return data = Buffer.concat([data, this.read()]);
          });
        } else if (-1 < urlObj.path.search("\\.(" + (extensions.join('|')) + ")$")) {
          data = new Buffer(0);
          reqRes.on('readable', function() {
            return data = Buffer.concat([data, this.read()]);
          });
        } else {
          reqRes.pipe(res);
        }
        return reqRes.on('end', function() {
          if (-1 < urlObj.path.search('^/lf/encrypted/')) {
            lf.cacheData(urlObj.path, data);
            res.end(data);
          }
          if (-1 < urlObj.path.search("\\.(" + (extensions.join('|')) + ")$")) {
            cache.cache(urlObj.href, data, reqRes.headers['content-encoding']);
            console.log("Done Caching " + urlObj.href);
            res.end(data);
          }
          if (urlObj.hostname === 'mobil.zeit.de' && (reqRes.headers['content-encoding'] != null) && reqRes.headers['content-encoding'] === 'gzip') {
            zlib.unzip(data, function(e, result) {
              data = result.toString().replace("return (document.cookie.indexOf('facdone')!=-1)? true : false;", 'return false;');
              return zlib.gzip(data, function(e, result) {
                return res.end(result);
              });
            });
          }
          return config.toAll('add-container', container);
        });
      });
      reqReq.end();
      return reqReq.on('error', function(e) {
        console.error('http.request:e');
        console.dir(e);
        console.log("error: " + urlObj.href);
        res.statusCode = 500;
        res.end();
        if (-1 < urlObj.path.search('\\.js$')) {
          console.log("Delete Cache " + urlObj.href);
          return cache["delete"](href);
        }
      });
    });
  };

}).call(this);
